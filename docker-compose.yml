services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    image: app-postgres:16
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppassword}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"   # opcional
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: app-dotnet-api:latest
    container_name: api
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8081,http://127.0.0.1:8081}
      ConnectionStrings__Default: Host=db;Port=5432;Database=${POSTGRES_DB:-appdb};Username=${POSTGRES_USER:-appuser};Password=${POSTGRES_PASSWORD:-apppassword};Include Error Detail=true
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-8080}:8080"
    restart: unless-stopped
    # (healthcheck viene del Dockerfile)

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://${PUBLIC_HOST:-localhost}:${API_PORT:-8080}
    image: app-react-web:latest
    container_name: web
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${WEB_PORT:-8081}:80"
    restart: unless-stopped

volumes:
  dbdata:
